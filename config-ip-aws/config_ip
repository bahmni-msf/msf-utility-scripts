#! /bin/bash

CONFIG='{
  "aws_accounts": {
    "12345": {
      "jump-server": {
        "sg_id": "sg-1234",
        "sg_name": "Jump server",
        "port_range": 22
      },
      "lb": {
        "sg_id": "sg-0123",
        "sg_name": "Load Balancer",
        "port_range": 443
      }
    },
    "01234": {
      "jump-server": {
        "sg_id": "sg-12334",
        "sg_name": "Jump server",
        "port_range": 22
      }
    }
  },
  "ip_file_path": ".my_ip",
  "name": "user"
}'

#-------------------------------------------
set -e

PROFILE=""
PROFILE_ID=""
SGS="[]"
OLD_IPS="{}"
NEW_IP=""
NAME=""
CLI_PROFILE=""
CLI_REMOVE_IP=""
CLI_SG=""
CLI_NAME=""
CLI_HELP=""

RESET_TEXT_COLOR='\033[0m'
GREEN_TEXT_COLOR='\033[0;32m'
RED_TEXT_COLOR='\033[0;31m'
YELLOW_TEXT_COLOR='\033[33m'

function log_error() {
  echo -e "❌ ${RED_TEXT_COLOR}ERROR - Hey dude.... $1${RESET_TEXT_COLOR}"
  return 1
}

function log_warning() {
  local message=$1
  echo -e "   🚯 ${YELLOW_TEXT_COLOR}WARN - ${message}${RESET_TEXT_COLOR}"
}

function log_start_task() {
  local message=$1
  echo "⏳ ${message}"
}

function log_end_task() {
  local message=$1
  echo "✅ ${message}"
}

function log_sub_task() {
  local message=$1
  echo "   📌 ${message}"
}

function log_green_output() {
  echo -e "${GREEN_TEXT_COLOR}$1${RESET_TEXT_COLOR}"
}

function log_red_output() {
  echo -e "${RED_TEXT_COLOR}$1${RESET_TEXT_COLOR}"
}

function log_info() {
  echo -e "$1"
}

function is_jq_installed() {
  if ! which jq >/dev/null; then
    log_error "Please install jq to run this script"
  fi
}

function is_aws_installed() {
  if ! which aws >/dev/null; then
    log_error "Please install AWS to run this script"
  fi
}

function check_config_format() {
  if ! echo "$CONFIG" | jq >/dev/null; then
    log_error "Please check configuration"
  fi
}

function load_profile() {
  local cli_profile=$1

  local output=$(aws sts get-caller-identity --profile "$cli_profile" --no-cli-pager 2>&1) || true
  if jq -e '.Account' >/dev/null 2>&1 <<<"$output"; then
    local aws_account_id=$(jq -er '.Account' <<<"$output")
    if jq -e ".aws_accounts.\"$aws_account_id\"" <<<"$CONFIG" >/dev/null; then
      PROFILE="$cli_profile"
      PROFILE_ID="$aws_account_id"
    else
      log_error "Please configure AWS key values in CONFIG"
    fi
  else
    log_error "$(echo "$output" | cut -c1-)"
  fi
}

function load_sgs() {
  local cli_sg=$1
  local config=$2
  local profile_id=$3

  if [ -n "$cli_sg" ]; then
    local selected_sg=$(jq -c --arg profile_id "$profile_id" --arg selected "$cli_sg" '.aws_accounts[$profile_id][$selected]' <<<"$config")
    if [ "$selected_sg" != "null" ]; then
      SGS="[$selected_sg]"
    fi
  else
    SGS=$(jq -c ".aws_accounts.\"$profile_id\" | values | map(.)" <<<"$config")
  fi

  if [ $(jq length <<<"$SGS") -eq 0 ]; then
    log_error "Given Security Group is not configured"
  fi
}

function check_prerequisite_to_start_script() {
  is_jq_installed
  is_aws_installed
  check_config_format
}

function remove_ip_from_aws_sgs() {
  local sgs=$1
  local profile=$2

  log_start_task "Removing old IP from AWS Security Groups"
  local no_of_sg=$(jq "length" <<<"$sgs")

  for ((i = 0; i < $no_of_sg; i++)); do
    local sg_id=$(jq -r ".["$i"].sg_id" <<<"$sgs")
    local sg_name=$(jq -r ".["$i"].sg_name" <<<"$sgs")
    local port_range=$(jq ".["$i"].port_range" <<<"$sgs")
    local ip=$(jq -r ".\"$PROFILE_ID-$sg_id\"" <<<"$OLD_IPS")

    if [ "$ip" != "null" ]; then
      log_sub_task "Removing IP from \"$PROFILE_ID\" --> \"$sg_name\" --> \"$port_range\" --> \"$ip\"/32"

      local output=$(aws ec2 revoke-security-group-ingress --profile "$profile" --group-id "$sg_id" --protocol tcp --port "$port_range" --cidr "$ip"/32 --no-cli-pager 2>&1) || true
      if ! echo "$output" | jq -e '.Return == true' >/dev/null 2>&1; then
        log_warning "$(echo "$output" | cut -c1-)"
      fi
      remove_ip_from_ips_object "$PROFILE_ID" "$sg_id"
    else
      log_warning "No local deduction of IP for \"$PROFILE_ID\" --> \"$sg_name\""
    fi

  done

  log_end_task "Removed old IP from AWS Security Groups"

}

function save_ips_in_file() {
  local data=$1
  local ip_file_path="$(echo ~)/$(echo $CONFIG | jq -r ".ip_file_path")"

  echo "$data" >"$ip_file_path"
}

function update_sgs_on_ip_change() {
  local sgs=$1
  local profile=$2
  local new_ip=$3

  local no_of_sg=$(jq "length" <<<"$sgs")
  local need_to_update_sgs="[]"

  log_start_task "Verifying if the previous IP matches the current IP for security groups"

  for ((i = 0; i < "$no_of_sg"; i++)); do
    local sg_id=$(jq -r ".["$i"].sg_id" <<<"$sgs")
    local sg_name=$(jq -r ".["$i"].sg_name" <<<"$sgs")
    local old_ip=$(jq -r ".\"$PROFILE_ID-$sg_id\"" <<<"$OLD_IPS")

    if [ "$old_ip" != "$new_ip" ]; then
      log_sub_task "Detected IP change in \"$profile\" --> \"$sg_name\" | Previous IP: \"$old_ip\" | New IP: \"$new_ip\""
      need_to_update_sgs=$(jq --argjson sg "$(jq ".[$i]" <<<"$sgs")" '. + [$sg]' <<<"$need_to_update_sgs")
    fi
  done

  local need_to_update_sgs_length=$(jq length <<<"$need_to_update_sgs")
  if [ "$need_to_update_sgs_length" -gt 0 ]; then
    SGS="$need_to_update_sgs"
    log_end_task "Detected IP changes in $need_to_update_sgs_length security groups"
  else
    log_error "Your previous IP matches the current IP for given security groups"
  fi
}

function load_new_ip() {
  NEW_IP="$(dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com | tr -d '"')"
}

function add_ip_in_aws_sgs() {
  log_start_task "Adding IP into AWS Security Groups"

  local sgs=$1
  local profile=$2
  local new_ip=$3
  local name=$4

  local no_of_sg=$(jq "length" <<<"$sgs")
  for ((i = 0; i < $no_of_sg; i++)); do
    local sg_id=$(jq -r ".["$i"].sg_id" <<<"$sgs")
    local sg_name=$(jq -r ".["$i"].sg_name" <<<"$sgs")
    local port_range=$(jq ".["$i"].port_range" <<<"$sgs")
    local old_ip=$(jq -r ".\"$PROFILE_ID-$sg_id\"" <<<"$OLD_IPS")

    if [ "$old_ip" != "$new_ip" ]; then
      log_sub_task "Adding IP to \"$PROFILE_ID\" --> \"$sg_name\" --> \"$port_range\" --> \"$new_ip\"/32 --> \"$name\""
      local output=$(aws ec2 authorize-security-group-ingress --profile "$profile" --group-id "$sg_id" --protocol tcp --port "$port_range" --cidr "$new_ip/32" --no-cli-pager 2>&1) || true
      if echo "$output" | jq -e '.Return == true' >/dev/null 2>&1; then
        aws ec2 update-security-group-rule-descriptions-ingress --profile "$profile" --group-id "$sg_id" --ip-permissions "[{\"IpProtocol\": \"tcp\", \"FromPort\": $port_range, \"ToPort\": $port_range, \"IpRanges\": [{\"CidrIp\": \"$new_ip/32\", \"Description\": \"$name\"}]}]" --no-cli-pager >/dev/null 2>&1
      else
        log_warning "$(echo $output | cut -c1-)"
      fi
      save_ip_in_ips_object "$PROFILE_ID" "$sg_id" "$new_ip"
    else
      log_warning "Local IP and new IP are identical for $profile -> $sg_name"
    fi
  done

  log_end_task "Added IP into AWS Security Groups"
}

function load_old_ips() {
  local ip_file_path="$(echo ~)/$(echo "$CONFIG" | jq -r ".ip_file_path")"
  if [ -f "$ip_file_path" ]; then
    OLD_IPS=$(jq "." "$ip_file_path")
  fi
}

function load_name() {
  local cli_name=$1

  if [ -n "$cli_name" ]; then
    NAME="$cli_name"
  else
    NAME=$(jq -r ".name" <<<"$CONFIG")
  fi
}

function remove_ip_from_ips_object() {
  local profile_id=$1
  local sg_id=$2
  OLD_IPS=$(jq "del(.\"$profile_id-$sg_id\")" <<<"$OLD_IPS")
}

function save_ip_in_ips_object() {
  local profile_id=$1
  local sg_id=$2
  local ip=$3
  new_key_value=$(jq --arg profile_id "$profile_id" --arg sg_id "$sg_id" --arg ip "$ip" '. + {($profile_id + "-" + $sg_id): $ip}' <<<"$OLD_IPS")
  OLD_IPS="$new_key_value"
}

function add_ip() {
  log_green_output "===[==================> Adding IP <==================]===\n"
  local sgs=$1
  local profile=$2

  load_new_ip
  load_old_ips
  update_sgs_on_ip_change "$sgs" "$profile" "$NEW_IP"
  remove_ip_from_aws_sgs "$SGS" "$profile"
  load_name "$CLI_NAME"
  add_ip_in_aws_sgs "$SGS" "$profile" "$NEW_IP" "$NAME"
  save_ips_in_file "$OLD_IPS"

  log_green_output "\n===[==================> Successfully Added IP <==================]==="
}

function remove_ip() {
  log_red_output "===[==================> Removing IP <==================]===\n"
  local sgs=$1
  local profile=$2

  load_old_ips
  remove_ip_from_aws_sgs "$sgs" "$profile"
  save_ips_in_file "$OLD_IPS"

  log_red_output "\n===[==================> Successfully Removed IP <==================]==="
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -p | --profile)
      if [[ -n "$2" ]]; then
        CLI_PROFILE="$2"
        shift 2
      else
        log_error "Missing value for $1."
        return 1
      fi
      ;;
    -r | --remove-ip)
      CLI_REMOVE_IP=true
      shift
      ;;
    -h | --help)
      CLI_HELP=true
      shift
      ;;
    -sg | --security-group)
      if [[ -n "$2" ]]; then
        CLI_SG="$2"
        shift 2
      else
        log_error "Missing value for $1."
        return 1
      fi
      ;;
    -n | --name)
      if [[ -n "$2" ]]; then
        CLI_NAME="$2"
        shift 2
      else
        log_error "Missing value for $1."
        return 1
      fi
      ;;
    *)
      log_error "Invalid option $1"
      return 1
      ;;
    esac
  done
}

function main() {
  check_prerequisite_to_start_script
  parse_arguments "$@"

  if [ "$CLI_HELP" = true ]; then
    log_info "usage:  config_ip  [-h | --help] [-p | --profile <profile-name>] [-r | --remove-ip]\n\t\t   [-sg | --security-group] [-n | --name]\n\tprofile    Incorporate an IP address into a specific AWS account's security group.\n\tremove-ip  remove an IP address in AWS security group\n\tsecurity.. Incorporate an ip into a specific security group\n\tname       Include a distinct name through the command-line interface (CLI)"
    return 0
  fi

  load_profile "$CLI_PROFILE"
  load_sgs "$CLI_SG" "$CONFIG" "$PROFILE_ID"

  if [ "$CLI_REMOVE_IP" = true ]; then
    remove_ip "$SGS" "$PROFILE"
    return 0
  fi

  add_ip "$SGS" "$PROFILE"

}

main "$@"
